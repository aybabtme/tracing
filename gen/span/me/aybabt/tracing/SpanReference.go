// automatically generated by the FlatBuffers compiler, do not modify

package tracing

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SpanReference struct {
	_tab flatbuffers.Table
}

func GetRootAsSpanReference(buf []byte, offset flatbuffers.UOffsetT) *SpanReference {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SpanReference{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SpanReference) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SpanReference) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SpanReference) ChildOf(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SpanReference) ChildOfLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SpanReference) FollowsFrom(j int) uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetUint64(a + flatbuffers.UOffsetT(j*8))
	}
	return 0
}

func (rcv *SpanReference) FollowsFromLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func SpanReferenceStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SpanReferenceAddChildOf(builder *flatbuffers.Builder, childOf flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(childOf), 0)
}
func SpanReferenceStartChildOfVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SpanReferenceAddFollowsFrom(builder *flatbuffers.Builder, followsFrom flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(followsFrom), 0)
}
func SpanReferenceStartFollowsFromVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(8, numElems, 8)
}
func SpanReferenceEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
