// automatically generated by the FlatBuffers compiler, do not modify

package tracing

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SpanContext struct {
	_tab flatbuffers.Table
}

func GetRootAsSpanContext(buf []byte, offset flatbuffers.UOffsetT) *SpanContext {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SpanContext{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SpanContext) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SpanContext) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SpanContext) TraceId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SpanContext) MutateTraceId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(4, n)
}

func (rcv *SpanContext) SpanId() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SpanContext) MutateSpanId(n uint64) bool {
	return rcv._tab.MutateUint64Slot(6, n)
}

func (rcv *SpanContext) Baggages(obj *KeyValue, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SpanContext) BaggagesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func SpanContextStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func SpanContextAddTraceId(builder *flatbuffers.Builder, traceId uint64) {
	builder.PrependUint64Slot(0, traceId, 0)
}
func SpanContextAddSpanId(builder *flatbuffers.Builder, spanId uint64) {
	builder.PrependUint64Slot(1, spanId, 0)
}
func SpanContextAddBaggages(builder *flatbuffers.Builder, baggages flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(baggages), 0)
}
func SpanContextStartBaggagesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SpanContextEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
